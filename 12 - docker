High Avaliabilty: more than one server
why: if one server got deleted then other server will gives the app

DOCKER SWARM:
its an orchestration tool for containers. 
used to manage multiple containers on multiple servers.
here we create a cluster (group of servers).
in that clutser we can create same container on multiple servers.
here we have master node and worker node.
master node will distribute the container to worker nodes.
worker node main purpose is to maintain the container.
without docker engine we cant create the cluster.


SETUP:
create 3 servers
install docker and start the service
hostnamectl set-hostname manager/worker-1/worker-2
Enable 2377 port 

docker swarm init (manager) -- > copy-paste the token to worker nodes
docker node ls

Note: individual containers are not going to replicate.
if we create a service then only containers will be distributed.

SERVICE: it's a way of exposing and managing multipe conatiners.

docker service create --name movies --replicas 3 -p 81:80 abduljavvadkhan786/movies:latest
docker service ls		: to list services
docker service inspect movies	: to get complete info of service
docker service ps movies	: to list the containers of movies
docker service scale movies=10	: to scale in the containers
docker service scale movies=3	: to scale out the containers
docker service rollback movies	: to go previous state
docker service logs movies	: to see the logs
docker service rm movies	: to delete the services.


Note: if we delete a container it will recreate automatically itself.
it is called as self healing.


CLUSTER ACTIVIES:
docker swarm leave (worker)	: to make node inactive from cluster
docker node rm node-id (manager): to delete worker node which is on down state
docker swarm join-token manager	: to generate the token to join
docker node inspect node_id	: to get comple info of worker node

Note: we cant delete the node which is ready state
if we want to join the node to cluster again we need to paste the token on worker node



DOCKER NETWORKING:
Docker networks are used to make communication between the multiple containers that are running on same or different docker hosts. 
We have different types of docker networks.
Bridge Network
Host Network
None network
Overlay network

BRIDGE NETWORK: It is a default network that container will communicate with each other within the same host.

HOST NETWORK: When you Want your container IP and ec2 instance IP same then you use host network

NONE NETWORK: When you donâ€™t Want The container to get exposed to the world, we use none network. It will not provide any network to our container.

OVERLAY NETWORK: Used to communicate containers with each other across the multiple docker hosts.


To create a network: docker network create network_name
To see the list: docker network ls
To delete a network: docker network rm network_name
To inspect: docker network inspect network_name
To connect a container to the network: docker network connect network_name container_id/name
apt install iputils-ping -y : command to install ping checks
To disconnect from the container: docker network disconnect network_name container_name
To prune: docker network prune

HISTORY:
 1  docker swarm init
    2  docker node ls
    3  docker run -itd --name cont1 -p 81:80 rahamshaik/paytmmovies:latest
    4  docker run -itd --name cont1 -p 81:80 rahamshaik/movies:latest
    5  docker run -itd --name cont1 -p 81:80 rahamshaik/moviespaytm:latest
    6  docker ps -a
    7  docker kill contr1
    8  docker kill cont1
    9  docker rm cont1
   10  docker service create --name movies --replicas 3 -p 81:80 rahamshaik/moviespaytm:latest
   11  docker service ls
   12  docker service inspect movies
   13  docker service ps movies
   14  docker service scale movies=10
   15  docker service ps movies
   16  docker service scale movies=5
   17  docker service ps movies
   18  docker service rollback movies
   19  docker service ps movies
   20  docker service logs movies
   21  docker service rm movies
   22  docker service ls
   23  docker service create --name movies --replicas 3 -p 81:80 rahamshaik/moviespaytm:latest
   24  docker node ls
   25  docker node rm 13x7q2odq5jhflwibtgwscgza
   26  docker node ls
   27  docker node rm uojl8fcpw8o07lkdoklpsl3y0
   28  docker node ls
   29  docker node inspect 0bbyohyeu388prg9oja6r2wfr
   30  history
   31  docker swarm joint-token manager
   32  docker swarm joinn-token manager
   33  docker swarm join-token manager
   34  docker swarm ca manager
   35  docker network ls
   36  docker network create raham
   37  docker network ls
   38  docker network isnpect raham
   39  docker network inspect raham
   40  docker run -itd --name cont1 -p 82:80 rahamshaik/trainpaytm:latest
   41  docker run -itd --name cont2 -p 83:80 rahamshaik/trainpaytm:latest
   42  docker connect cont1 raham
   43  docker network connect cont1 raham
   44  docker network connect raham cont1
   45  docker network inspect raham
   46  docker network connect raham cont2
   47  docker network inspect raham
   48  docker attach cont1
   49  docker ps -a
   50  docker start cont1
   51  docker ps -a
   52  docker exec -it cont1 -- ls
   53  docker exec -it cont1 ls
   54  docker exec -it cont1 apt update -y
   55  docker exec -it cont1 apt install ip-utils -y
   56  docker exec -it cont1 apt install iputils-ping -y
   57  docker exec -it cont1 pig 172.19.0.3
   58  docker exec -it cont1 ping 172.19.0.3
   59  docker network disconnect raham cont2
   60  docker exec -it cont1 ping 172.19.0.3
   61  docker network connect raham cont2
   62  docker exec -it cont1 ping 172.19.0.3
   63  docker network disconnect raham cont1
   64  docker network prune
   65  docker network ls
   66  docker network inspect raham
   67  docker network disconnect raham cont2
   68  docker network prune
